{"version":3,"sources":["avatar.jpg","border.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","borderRef","useRef","imageRef","useState","out","setOut","up","setUp","unit","width","aspect","crop","setCrop","className","style","color","src","avatar","height","marginBottom","ref","border","display","Dragger","beforeUpload","file","reader","FileReader","onload","event","img","Image","result","target","readAsDataURL","accept","showUploadList","backgroundColor","borderRadius","opacity","cursor","margin","type","fontSize","visible","footer","onCancel","maxWidth","onClick","image","current","scaleX","naturalWidth","scaleY","naturalHeight","canvas","document","createElement","ctx","getContext","drawImage","x","y","imgData","getImageData","d","data","i","length","med","putImageData","link","download","href","toDataURL","click","ruleOfThirds","onChange","onImageLoaded","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b1808847.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/avatar.6eb26c0f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/border.e59de9b2.png\";","import React, {useRef, useState} from 'react';\nimport {Upload, Icon, Modal, Button} from 'antd'\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport 'antd/dist/antd.css'\nimport './App.css';\nimport avatar from './avatar.jpg'\nimport border from './border.png'\n\nfunction App() {\n  const borderRef = useRef()\n  const imageRef = useRef()\n  const [out, setOut] = useState()\n  const [up, setUp] = useState()\n  const [crop, setCrop] = useState({\n    unit: '%',\n    width: 100,\n    aspect: 1,\n  })\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 style={{color: 'white'}}>头像自动加框</h1>\n        <img src={avatar} style={{width: 200, height: 200, marginBottom: 30}} />\n        <img ref={borderRef} src={border} style={{width: 1000, height: 1000, display: 'none'}} />\n        <Upload.Dragger\n          beforeUpload={file => {\n            const reader = new FileReader()\n            reader.onload = function (event) {\n              const img = new Image()\n              img.onload = () => setUp(reader.result)\n              img.src = event.target.result\n            }\n            reader.readAsDataURL(file)\n            return false\n          }}\n          accept='image/*'\n          showUploadList={false}\n          style={{backgroundColor: 'gray', borderRadius: 4, opacity: 0.5, border: '2px dashed white'}}\n        >\n          <div style={{cursor: 'pointer', color: 'white', margin: '30px 100px'}}>\n            <Icon type=\"upload\" style={{fontSize: 50}}/>\n            <p style={{fontSize: 20}}>点击或拖拽上传</p>\n          </div>\n        </Upload.Dragger>\n        <Modal visible={out} footer={null} onCancel={()=>setOut()}>\n          <img src={out} style={{ maxWidth: '100%' }} />\n        </Modal>\n        <Modal visible={up} footer={<Button type='primary' onClick={()=>{\n          const image = imageRef.current\n          const scaleX = image.naturalWidth / image.width\n          const scaleY = image.naturalHeight / image.height\n          const canvas = document.createElement('canvas');\n          canvas.width = 1000\n          canvas.height = 1000\n          const ctx = canvas.getContext('2d')\n          ctx.drawImage(\n            image,\n            crop.x * scaleX,\n            crop.y * scaleY,\n            crop.width * scaleX,\n            crop.height * scaleY,\n            0, 0, 1000, 1000,\n          )\n          ctx.drawImage(borderRef.current, 0, 0)\n          var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n          var d = imgData.data;\n          // loop through all pixels\n          // each pixel is decomposed in its 4 rgba values\n          for (var i = 0; i < d.length; i += 4) {\n            // get the medium of the 3 first values ( (r+g+b)/3 )\n            var med = (d[i] + d[i + 1] + d[i + 2]) / 3;\n            // set it to each value (r = g = b = med)\n            d[i] = d[i + 1] = d[i + 2] = med;\n            // we don't touch the alpha\n          }\n          // redraw the new computed image\n          ctx.putImageData(imgData, 0, 0);\n          const link = document.createElement('a');\n          link.download = 'avatar.jpg'\n          link.href = canvas.toDataURL(\"image/jpeg\");\n          link.click()\n          setUp()\n          setOut(link.href)\n        }}>完成并下载</Button>} onCancel={() => setUp()}>\n          {/*<img src={out} style={{height: '80%', width: '80%'}} />*/}\n          <ReactCrop\n            src={up}\n            crop={crop}\n            ruleOfThirds\n            onChange={setCrop}\n            onImageLoaded={img => imageRef.current = img}\n          />\n        </Modal>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}